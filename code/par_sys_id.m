% Parametric system identification
% (modified from M. Khoo)
% % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % 
% Mastrofini Alessandro 
% % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % 
% Medical Engineering - University of Rome Tor Vergata
% Physiological Systems Modeling and Simulation 
% F. Caselli, MSSF A.Y. 2021/2022
% % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % 

clear 
close all
clc

% parametric system identification of respiratory mechnaics; data are
% generated by simulating the linear lung mechanics model (RLC) and then
% adding Gaussian white noise to the output; different input, u (p_ao), are
% considered; the output, y (p_A), is the noisy response to the input;

% DATA GENERATION ********************************************************

% time vector
T_final=0.8;
T=0.005; % 0.001
t=(0:T:T_final)';

% input: step
u=ones(size(t)); 
% other input signal for identification

%u=1/3*idinput(size(t),'rgs');
% u=idinput(size(t),'rbs');
% u=idinput(size(t),'prbs');

% we do not have a real patient under hands, so we perform input-output
% measurements on a "virtual" patient (this way, we also know its "true"
% impulse response).

% linear model of lung mechanics (see lecture notes)
% parameter values of model
R=0.1; % resistance in units of cm H2O s/L
L=0.01; % inertance in units of cm H2O s^2/L
C=0.1; % compliance in units of L/cm H2O

theta=[R,L,C];

% solve model using lsim (cf. rlc_fun) and plot results
y=rlc_fun(theta,u,t);

% add gaussian noise to simulate measurement error/noise
 y=y+0.05/3*randn(size(y)); % 0.01
% y=y+0.05/3*max(abs(y(:)))*randn(size(y)); % 0.01

figure()
plot(t,u,'b','linewidth',2)
title('Input','fontsize',12)
xlabel('Time [s]','fontsize',12)
set(gca,'fontsize',12)
ylim([-1.3,1.3])

figure()
plot(t,y,'m','linewidth',2)
title('Output','fontsize',12)
xlabel('Time [s]','fontsize',12)
set(gca,'fontsize',12)


% PARAMETRIC SYSTEM IDENTIFICATION ***************************************

% true parameter values
theta_true=[R; L; C];

% initial guesses for the parameters to be estimated
% parameters vector: theta=[R;L;C]
theta_init=[1.5; 0.8; 2.8].*theta_true; 

% optimization
options = optimset('PlotFcns',@optimplotfval); % add monitoring graphs
[theta_est,obj_fun_val,exitflag,output]=fminsearch('obj_fun',theta_init,options,y,u,t);

% visualize optimization report
disp(' ')
disp('************* Report *************')
disp(['exitflag=', num2str(exitflag)])
disp('true, initial and estimated parameter values')
disp([theta_true,theta_init,theta_est])
disp('final value of the objective function')
disp(obj_fun_val)
disp(output)
disp(output.message)

% compute estimated output
y_pred=rlc_fun(theta_est,u,t);

% plot true and predicted output
figure()
plot(t,y,'m','linewidth',2)
hold on
plot(t,y_pred,'g','linewidth',2)
title('Output','fontsize',12)
legend('true','predicted','location','best')
xlabel('Time [s]','fontsize',12)
set(gca,'fontsize',12)

% relative errors on parameter values
disp('relative errors on parameter values')
disp(abs(theta_est(1)-theta_true(1))/abs(theta_true(1)))
disp(abs(theta_est(2)-theta_true(2))/abs(theta_true(2)))
disp(abs(theta_est(3)-theta_true(3))/abs(theta_true(3)))

% SENSITIVITY ANALYSIS ***************************************************

% Sensitivity of measurements with respect to parameters
% J (N_m x N_p)
% J_mp=derivative of m-th measure with respect to p-th parameter
disp('%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%')
disp('Sensitivity analysis')
disp('%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%')

% reference parameter values
theta_ref=theta_true;
% number of parameters
N_p=length(theta_ref);
y_ref=rlc_fun(theta_ref,u,t);
% number of measures
N_m=length(y_ref);
% increment
h=1e-6; % 1e-7
pert=h*theta_ref;
% jacobian matrix
J=zeros(N_m,N_p);
for i=1:N_p
    % initialization to reference parameters
    theta_pert=theta_ref;
    % perturbation of i-th parameter
    theta_pert(i)=theta_pert(i)+pert(i);
    % output corresponding to perturbed parameters
    y_pert=rlc_fun(theta_pert,u,t);
    % sensitivity
    J(:,i)=(y_pert-y_ref)/pert(i); % similar to (f(x_0+h)-f(x_0))/h
end

% J columns are linearly dependent! (exercise: prove the following relationship)
% J_C = J_L * L/C + J_R * R/C (theta=[R,L,C])
disp([J(:,3), J(:,2)*theta_ref(2)/theta_ref(3)+J(:,1)*theta_ref(1)/theta_ref(3)])

% J
format long
disp('condition number of sensitivity matrix J')
cond(J)
disp('rank of sensitivity matrix (wng: fake news!)')
rank(J)
disp('singular values of sensitivity matrix')
[U,S,V]=svd(J);
diag(S)


