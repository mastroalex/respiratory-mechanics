% Parametric identification of lung mechanics by means of Gauss-Newton algorithm

% % % % % % % % % % % % % % % % % % % % % % % %
% F. Caselli, MSSF A.A. 2020/2021
% % % % % % % % % % % % % % % % % % % % % % % %

clear
close all
clc

% parametric system identification of respiratory mechnaics; data are
% generated by simulating the linear lung mechanics model (RLC) and then
% adding Gaussian white noise to the output; different input, u, are
% considered; the output, y, is the noisy response to the input;

% DATA GENERATION ********************************************************

% time vector
T_final=0.8;
T=0.005; % 0.001
t=(0:T:T_final)';

% input: step
u=ones(size(t));
% u=1/3*idinput(size(t),'rgs');
% u=idinput(size(t),'rbs');
% u=idinput(size(t),'prbs');

% we do not have a real patient under hands, so we perform input-output
% measurements on a "virtual" patient (this way, we also know its "true"
% impulse response).

% linear model of lung mechanics (see lecture notes)
% parameter values of model
R=0.1; % resistance in units of cm H2O s/L
L=0.01; % inertance in units of cm H2O s^2/L
C=0.1; % compliance in units of L/cm H2O

p_true=[L*C; R*C]; % (note that two parameters instead of three are used here!)

% solve model using lsim and plot results
[y,~]=rlc_fun_two_param(p_true,u,t); 

% add gaussian noise to simulate measurement error/noise
y=y+0.05/3*randn(size(y)); % 0.01
% y=y+0.05/3*max(abs(y(:)))*randn(size(y)); % 0.01

figure()
plot(t,u,'b','linewidth',2)
title('Input','fontsize',12)
xlabel('Time [s]','fontsize',12)
set(gca,'fontsize',12)
ylim([-1.3,1.3])

figure()
plot(t,y,'m','linewidth',2)
title('Output','fontsize',12)
xlabel('Time [s]','fontsize',12)
set(gca,'fontsize',12)

% PARAMETRIC SYSTEM IDENTIFICATION ***************************************

% initial guess on parameters
p_init=[1.5; 0.8].*p_true;
%%%% TRY MORE AND TRY TO FIND DIVERGENGE:
%p_init=[4; 7].*p_true;


% relaxation parameter
% alpha=1;
alpha=0.6;

% regularization parameter
% lambda=0;
lambda=0.1;

% tolerance
tol=1e7*eps;

% maximum number of iterations
max_iter=30;

% iterazione
done=false;

% initialize parameters
p=p_init;

% enable/disable parameter convergence plot
plot_flag=true;
max_iter_plot=10;

if plot_flag
    % plot true parameter value and current guess
    f1=figure();
    subplot(2,1,1)
    hold on
    line([0,max_iter_plot],[p_true(1),p_true(1)],'linewidth',2,'Color','r','LineStyle',':')
    xlabel('Iteration')
    ylabel('Parameter L*C')
    set(gca,'FontSize',12)
    subplot(2,1,2)
    hold on
    line([0,max_iter_plot],[p_true(2),p_true(2)],'linewidth',2,'Color','b','LineStyle',':')
    xlabel('Iteration')
    ylabel('Parameter R*C')
    set(gca,'FontSize',12)
end

i=0;
% Gauss-Newton iteration
while (~done) && (i<=max_iter)
    i=i+1;
    
    [y_pred,~]=rlc_fun_two_param(p,u,t);
    
    % objective funtion to be minimized: E=1/2*||e||^2
    
    % error vector
    e=(y_pred-y); % *
    
    % Jacobian matrix - sensitivity wrt parameter (updated at each iteration)
    [J]=jacobian_fun(p,u,t);
    
    % gradient of objective function wrt parameters
    dE_dp=J'*e;
    
    % Hessian of objective function with second derivatives neglected (Gauss-Newton approximation)
%     d2E_dp2=J'*J;
    % % regularized Hessian
    d2E_dp2=J'*J+lambda*eye(2);
    
    h=-d2E_dp2\dE_dp;
    
    % check (stop criterion on h)
    done=norm(h)<tol;
    
    p_save=p; % for plotting purpose
    
    % parameter update (with relaxation)
    p=p+alpha*h;
    
    if plot_flag
        % update parameter convergence plot
        figure(f1);
        subplot(2,1,1)
        hold on
        plot([i-1,i],[p_save(1),p(1)],'r','linewidth',2)
        subplot(2,1,2)
        hold on
        plot([i-1,i],[p_save(2),p(2)],'b','linewidth',2)
        drawnow
        pause(0.2)
    end
    
end

% display
disp([p_init, p_true, p])
